define(["../../../@webcomponents/shadycss/apply-shim.min.js","../lit-element.js"],function(_applyShimMin,_litElement){"use strict";const assert=chai.assert;suite("Styling",()=>{let container;setup(()=>{container=document.createElement("div");document.body.appendChild(container)});teardown(()=>{if(container&&container.parentNode){container.parentNode.removeChild(container)}});test("content shadowRoot is styled",()=>{customElements.define("s-1",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          div {
            border: 2px solid blue;
          }
        </style>
        <div>Testing...</div>`}});const el=document.createElement("s-1");container.appendChild(el);const div=el.shadowRoot.querySelector("div");assert.equal(getComputedStyle(div).getPropertyValue("border-top-width").trim(),"2px")});test("shared styling rendered into shadowRoot is styled",()=>{const style=_litElement.html`<style>
      div {
        border: 4px solid blue;
      }
    </style>`;customElements.define("s-2",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          div {
            border: 2px solid blue;
          }
        </style>
        ${style}
        <div>Testing...</div>`}});const el=document.createElement("s-2");container.appendChild(el);const div=el.shadowRoot.querySelector("div");assert.equal(getComputedStyle(div).getPropertyValue("border-top-width").trim(),"4px")});test("custom properties render",()=>{customElements.define("s-3",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          :host {
            --border: 8px solid red;
          }
          div {
            border: var(--border);
          }
        </style>
        <div>Testing...</div>`}});const el=document.createElement("s-3");container.appendChild(el);const div=el.shadowRoot.querySelector("div");assert.equal(getComputedStyle(div).getPropertyValue("border-top-width").trim(),"8px")});test("custom properties flow to nested elements",()=>{customElements.define("s-4-inner",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          div {
            border: var(--border);
          }
        </style>
        <div>Testing...</div>`}});customElements.define("s-4",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          s-4-inner {
            --border: 8px solid red;
          }
        </style>
        <s-4-inner></s-4-inner>`}});const el=document.createElement("s-4");container.appendChild(el);const div=el.shadowRoot.querySelector("s-4-inner").shadowRoot.querySelector("div");assert.equal(getComputedStyle(div).getPropertyValue("border-top-width").trim(),"8px")});test("elements with custom properties can move between elements",done=>{customElements.define("s-5-inner",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          div {
            border: var(--border);
          }
        </style>
        <div>Testing...</div>`}});customElements.define("s-5",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          s-5-inner {
            --border: 2px solid red;
          }
        </style>
        <s-5-inner></s-5-inner>`}});customElements.define("s-6",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          s-5-inner {
            --border: 8px solid red;
          }
        </style>`}});const el=document.createElement("s-5"),el2=document.createElement("s-6");container.appendChild(el);container.appendChild(el2);const inner=el.shadowRoot.querySelector("s-5-inner"),div=inner.shadowRoot.querySelector("div");assert.equal(getComputedStyle(div).getPropertyValue("border-top-width").trim(),"2px");el2.shadowRoot.appendChild(inner);requestAnimationFrame(()=>{assert.equal(getComputedStyle(div).getPropertyValue("border-top-width").trim(),"8px");done()})});test("@apply renders in nested elements",()=>{customElements.define("s-7-inner",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          div {
            @apply --bag;
          }
        </style>
        <div>Testing...</div>`}});customElements.define("s-7",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          s-7-inner {
            --bag: {
              border: 10px solid red;
            }
          }
        </style>
        <s-7-inner></s-7-inner>`}});const el=document.createElement("s-7");container.appendChild(el);const div=el.shadowRoot.querySelector("s-7-inner").shadowRoot.querySelector("div");assert.equal(getComputedStyle(div).getPropertyValue("border-top-width").trim(),"10px")})});suite("ShadyDOM",()=>{let container;setup(function(){if(!window.ShadyDOM){this.skip()}else{container=document.createElement("div");document.body.appendChild(container)}});teardown(()=>{if(container&&container.parentNode){container.parentNode.removeChild(container)}});test("properties in styles render with initial value and cannot be changed",babelHelpers.asyncToGenerator(function*(){let border=`6px solid blue`;customElements.define("shady-1",class extends _litElement.LitElement{_render(){return _litElement.html`
        <style>
          div {
            border: ${border};
          }
        </style>
        <div>Testing...</div>`}});const el=document.createElement("shady-1");container.appendChild(el);const div=el.shadowRoot.querySelector("div");assert.equal(getComputedStyle(div).getPropertyValue("border-top-width").trim(),"6px");border=`4px solid orange`;el.requestRender();yield el.renderComplete;assert.equal(getComputedStyle(div).getPropertyValue("border-top-width").trim(),"6px")}))})});